<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Shell_Media.Content" xml:space="preserve">
    <value>Media Converter</value>
  </data>
  <data name="Shell_YouTubeDownloader.Content" xml:space="preserve">
    <value>Media Downloader</value>
  </data>
  <data name="Shell_Playlists.Content" xml:space="preserve">
    <value>Playlists</value>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>About this application</value>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>OnionMedia is a free video and audio file converter and downloader that works with ffmpeg and yt-dlp. It supports a large number of formats and codecs and is available on GitHub and the Microsoft Store.</value>
  </data>
  <data name="SettingsPage_PrivacyTermsLink.Content" xml:space="preserve">
    <value>Privacy Statement</value>
  </data>
  <data name="SettingsPage_PrivacyTermsLink.NavigateUri" xml:space="preserve">
    <value>https://github.com/onionware-github/OnionMedia/blob/main/Privacy.md</value>
    <comment>Here is your Privacy Statement url for SettingsPage</comment>
  </data>
  <data name="nextBtn" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="searchBtn" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="openFolder" xml:space="preserve">
    <value>Open folder</value>
  </data>
  <data name="playFile" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="downloadFinished" xml:space="preserve">
    <value>Download finished.</value>
  </data>
  <data name="videosDownloaded" xml:space="preserve">
    <value>videos downloaded.</value>
  </data>
  <data name="from.Text" xml:space="preserve">
    <value>From:</value>
  </data>
  <data name="hours.PlaceholderText" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="minutes.PlaceholderText" xml:space="preserve">
    <value>Minutes</value>
  </data>
  <data name="seconds.PlaceholderText" xml:space="preserve">
    <value>Seconds</value>
  </data>
  <data name="to.Text" xml:space="preserve">
    <value>To:</value>
  </data>
  <data name="unnamed" xml:space="preserve">
    <value>Unnamed</value>
  </data>
  <data name="newPreset" xml:space="preserve">
    <value>New preset</value>
  </data>
  <data name="source" xml:space="preserve">
    <value>Source</value>
  </data>
  <data name="custom" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="changesErrorMsg" xml:space="preserve">
    <value>Changes could not be applied.</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>An error has occurred.</value>
  </data>
  <data name="fileNotFound" xml:space="preserve">
    <value>File not found.</value>
  </data>
  <data name="fileNotFoundText" xml:space="preserve">
    <value>The file was not found and will be removed from the list.</value>
  </data>
  <data name="tagerrormsg" xml:space="preserve">
    <value>An error occurred while saving the new tags.</value>
  </data>
  <data name="conversionDone" xml:space="preserve">
    <value>Conversion done.</value>
  </data>
  <data name="filesConverted" xml:space="preserve">
    <value>{0} files were converted.</value>
  </data>
  <data name="livestreamDlgContent" xml:space="preserve">
    <value>Please try again after the live stream ended.</value>
  </data>
  <data name="livestreamDlgTitle" xml:space="preserve">
    <value>This is a livestream.</value>
  </data>
  <data name="converted" xml:space="preserve">
    <value>Converted</value>
  </data>
  <data name="downloaded" xml:space="preserve">
    <value>Downloaded</value>
  </data>
  <data name="removeAll.Text" xml:space="preserve">
    <value>Remove all</value>
  </data>
  <data name="cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="licenseTitle" xml:space="preserve">
    <value>OnionMedia License</value>
  </data>
  <data name="specialThanks" xml:space="preserve">
    <value>Special thanks to:</value>
  </data>
  <data name="specialThanksText" xml:space="preserve">
    <value>Marvin Miltkau (Design concepts, Icons)

BobaFett012345 (Much testing and bug reports)
Onionware | Lorenz Otto (Much testing and bug reports)

pukkandan (development and support for yt-dlp)</value>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>OnionMedia is a free video and audio file converter and downloader. It supports a large number of formats and codecs and is available on GitHub and the Microsoft Store.</value>
  </data>
  <data name="askForPlaylistDownloadContent" xml:space="preserve">
    <value>You've entered an URL to a playlist. Do you want to add the video only or the entire playlist?</value>
  </data>
  <data name="askForPlaylistDownloadTitle" xml:space="preserve">
    <value>Download the playlist?</value>
  </data>
  <data name="playlist" xml:space="preserve">
    <value>Playlist</value>
  </data>
  <data name="video" xml:space="preserve">
    <value>Video</value>
  </data>
</root>